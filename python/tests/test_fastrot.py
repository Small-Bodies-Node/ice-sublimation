"""Test fastrot results."""

import sys
import math
import json
import argparse
import subprocess

parser = argparse.ArgumentParser()
parser.add_argument("script", help="the fastrot script to test")
parser.add_argument(
    "--tol",
    metavar="tolerance",
    type=float,
    default=0.0006,
    help="relative test tolerance",
)
args = parser.parse_args()

RESET = "\033[00m"
OKGREEN = "\033[32m"
FAIL = "\033[31m"

# these values are from the FORTRAN code (41 latitude steps)
tests = """ Species   Obl.   r_H  log(r) A_vis A_ir    <Z>      Log(<Z>)
 H2O       90.0   0.10 -1.000  0.05 0.00  4.202E+19 19.623
 H2O       90.0   0.13 -0.900  0.05 0.00  2.643E+19 19.422
 H2O       90.0   0.16 -0.800  0.05 0.00  1.661E+19 19.220
 H2O       90.0   0.20 -0.700  0.05 0.00  1.044E+19 19.019
 H2O       90.0   0.25 -0.600  0.05 0.00  6.547E+18 18.816
 H2O       90.0   0.32 -0.500  0.05 0.00  4.101E+18 18.613
 H2O       90.0   0.40 -0.400  0.05 0.00  2.560E+18 18.408
 H2O       90.0   0.50 -0.300  0.05 0.00  1.591E+18 18.202
 H2O       90.0   0.63 -0.200  0.05 0.00  9.822E+17 17.992
 H2O       90.0   0.79 -0.100  0.05 0.00  6.003E+17 17.778
 H2O       90.0   1.00  0.000  0.05 0.00  3.610E+17 17.557
 H2O       90.0   1.26  0.100  0.05 0.00  2.119E+17 17.326
 H2O       90.0   1.58  0.200  0.05 0.00  1.196E+17 17.078
 H2O       90.0   2.00  0.300  0.05 0.00  6.342E+16 16.802
 H2O       90.0   2.51  0.400  0.05 0.00  3.019E+16 16.480
 H2O       90.0   3.16  0.500  0.05 0.00  1.179E+16 16.072
 H2O       90.0   3.98  0.600  0.05 0.00  3.052E+15 15.485
 H2O       90.0   5.01  0.700  0.05 0.00  2.982E+14 14.475
 H2O       90.0   6.31  0.800  0.05 0.00  5.855E+12 12.767
 H2O       90.0   7.94  0.900  0.05 0.00  4.648E+10 10.667
 H2O       90.0  10.00  1.000  0.05 0.00  2.017E+08  8.305
 H2O       90.0  12.59  1.100  0.05 0.00  4.535E+05  5.657
 H2O       90.0  15.85  1.200  0.05 0.00  4.867E+02  2.687
 H2O       90.0  19.95  1.300  0.05 0.00  2.283E-01 -0.641
 H2O       90.0  25.12  1.400  0.05 0.00  4.236E-05 -4.373
 CO2       90.0   0.10 -1.000  0.05 0.00  7.493E+19 19.875
 CO2       90.0   0.13 -0.900  0.05 0.00  4.724E+19 19.674
 CO2       90.0   0.16 -0.800  0.05 0.00  2.978E+19 19.474
 CO2       90.0   0.20 -0.700  0.05 0.00  1.878E+19 19.274
 CO2       90.0   0.25 -0.600  0.05 0.00  1.183E+19 19.073
 CO2       90.0   0.32 -0.500  0.05 0.00  7.455E+18 18.872
 CO2       90.0   0.40 -0.400  0.05 0.00  4.695E+18 18.672
 CO2       90.0   0.50 -0.300  0.05 0.00  2.955E+18 18.470
 CO2       90.0   0.63 -0.200  0.05 0.00  1.858E+18 18.269
 CO2       90.0   0.79 -0.100  0.05 0.00  1.166E+18 18.067
 CO2       90.0   1.00  0.000  0.05 0.00  7.303E+17 17.863
 CO2       90.0   1.26  0.100  0.05 0.00  4.556E+17 17.659
 CO2       90.0   1.58  0.200  0.05 0.00  2.825E+17 17.451
 CO2       90.0   2.00  0.300  0.05 0.00  1.735E+17 17.239
 CO2       90.0   2.51  0.400  0.05 0.00  1.050E+17 17.021
 CO2       90.0   3.16  0.500  0.05 0.00  6.206E+16 16.793
 CO2       90.0   3.98  0.600  0.05 0.00  3.529E+16 16.548
 CO2       90.0   5.01  0.700  0.05 0.00  1.880E+16 16.274
 CO2       90.0   6.31  0.800  0.05 0.00  8.904E+15 15.950
 CO2       90.0   7.94  0.900  0.05 0.00  3.333E+15 15.523
 CO2       90.0  10.00  1.000  0.05 0.00  6.937E+14 14.841
 CO2       90.0  12.59  1.100  0.05 0.00  1.502E+13 13.177
 CO2       90.0  15.85  1.200  0.05 0.00  4.786E+09  9.680
 CO2       90.0  19.95  1.300  0.05 0.00  4.144E+05  5.617
 CO2       90.0  25.12  1.400  0.05 0.00  1.120E+01  1.049
 CO        90.0   0.10 -1.000  0.05 0.00  2.363E+20 20.374
 CO        90.0   0.13 -0.900  0.05 0.00  1.490E+20 20.173
 CO        90.0   0.16 -0.800  0.05 0.00  9.392E+19 19.973
 CO        90.0   0.20 -0.700  0.05 0.00  5.923E+19 19.773
 CO        90.0   0.25 -0.600  0.05 0.00  3.733E+19 19.572
 CO        90.0   0.32 -0.500  0.05 0.00  2.354E+19 19.372
 CO        90.0   0.40 -0.400  0.05 0.00  1.484E+19 19.172
 CO        90.0   0.50 -0.300  0.05 0.00  9.359E+18 18.971
 CO        90.0   0.63 -0.200  0.05 0.00  5.901E+18 18.771
 CO        90.0   0.79 -0.100  0.05 0.00  3.722E+18 18.571
 CO        90.0   1.00  0.000  0.05 0.00  2.346E+18 18.370
 CO        90.0   1.26  0.100  0.05 0.00  1.480E+18 18.170
 CO        90.0   1.58  0.200  0.05 0.00  9.328E+17 17.970
 CO        90.0   2.00  0.300  0.05 0.00  5.880E+17 17.769
 CO        90.0   2.51  0.400  0.05 0.00  3.706E+17 17.569
 CO        90.0   3.16  0.500  0.05 0.00  2.335E+17 17.368
 CO        90.0   3.98  0.600  0.05 0.00  1.470E+17 17.167
 CO        90.0   5.01  0.700  0.05 0.00  9.252E+16 16.966
 CO        90.0   6.31  0.800  0.05 0.00  5.813E+16 16.764
 CO        90.0   7.94  0.900  0.05 0.00  3.646E+16 16.562
 CO        90.0  10.00  1.000  0.05 0.00  2.279E+16 16.358
 CO        90.0  12.59  1.100  0.05 0.00  1.418E+16 16.152
 CO        90.0  15.85  1.200  0.05 0.00  8.750E+15 15.942
 CO        90.0  19.95  1.300  0.05 0.00  5.335E+15 15.727
 CO        90.0  25.12  1.400  0.05 0.00  3.192E+15 15.504
"""

lines = tests.splitlines()
for i in range(len(lines)):
    if i == 0:
        # column header
        print(lines[i])
        continue

    data = lines[i].split()
    species = data[0]
    obliquity = data[1]
    rh = str(10 ** float(data[3]))
    Av = data[4]
    Air = data[5]
    Z = float(data[6])

    output = subprocess.check_output(
        [
            sys.executable,
            args.script,
            "--Av",
            Av,
            "--Air",
            Air,
            "--rh",
            rh,
            "--obl",
            obliquity,
            "--nlat",  # match number of latitude steps
            "41",
            species,
        ]
    )
    results = json.loads(output)
    if results["status"] == "success":
        Z_ = results["results"]["Zbar"]

        # fractional difference
        d = (Z - Z_) * 2 / (Z + Z_)
        if d < args.tol:
            print(f"{lines[i]}: {OKGREEN}success{RESET}")
        else:
            print(f"{lines[i]}: {FAIL}fail{RESET} (fractional difference = {d})")
    else:
        print(f"{lines[i]}: {FAIL}fail{RESET}")
